{"version":3,"sources":["actions/weather.ts","helpers/api.ts","actions/wc.ts","components/Loading/index.module.scss","components/Loading/index.tsx","components/ErrorBoundary/index.module.scss","components/Header/index.tsx","App.tsx","serviceWorker.ts","reducers/weather.ts","reducers/wc.ts","reducers/index.ts","sagas/weather.ts","sagas/wc.ts","sagas/index.ts","store/index.ts","components/ErrorBoundary/index.tsx","index.tsx"],"names":["WEATHER_REQUEST","WEATHER_CURRENT_SUCCESS","WEATHER_ALL_SUCCESS","WEATHER_FAILURE","createWeatherRequest","city","type","payload","baseIconUrl","api","baseUrl","key","process","REACT_APP_OPEN_WEATHER_KEY","_tmp","axios","create","baseURL","this","responseType","get","getAll","coord","lat","lon","WEATHER_COMPARATOR_REQUEST","WEATHER_COMPARATOR_SUCCESS","WEATHER_COMPARATOR_FAILURE","createWCRequest","cities","module","exports","LoadingConst","className","s","fullWrap","loader","id","LoadingThin","wrap","Header","to","role","href","data-target","Home","loadable","fallback","Weather","NotFound","WeatherComparator","App","path","exact","Boolean","window","location","hostname","match","initState","data","timestamp","Date","isFetching","message","code","dailyForecastData","hourlyForecastData","rootReducer","combineReducers","weather","state","action","A","daily","hourly","response","status","wc","handlerWeatherRequest","watchWeatherRequest","apply","transitResponse","put","console","error","takeEvery","handlerWCRequest","watchWCRequest","citiesResponse","i","length","push","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ErrorBoundary","props","hasError","msg","err","children","name","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c869179f.chunk.js","sourcesContent":["import { IAction, IWeatherRequestArgs } from '../types/actions'\n\nexport const WEATHER_REQUEST: string = 'WEATHER_REQUEST'\nexport const WEATHER_CURRENT_SUCCESS: string = 'WEATHER_CURRENT_SUCCESS'\nexport const WEATHER_ALL_SUCCESS: string = 'WEATHER_ALL_SUCCESS'\nexport const WEATHER_FAILURE: string = 'WEATHER_FAILURE'\n\nexport const createWeatherRequest = ({ city }: IWeatherRequestArgs): IAction => ({\n  type: WEATHER_REQUEST,\n  payload: { city }\n})","import axios, { AxiosInstance } from 'axios'\n\nexport const baseIconUrl = 'http://openweathermap.org/img/wn/';\n\ninterface IApi {\n  get(city: string): Promise<any>,\n  getAll(coord: { lat: number, lon: number }): Promise<any>,\n  baseUrl: string,\n  _tmp: AxiosInstance,\n  key: string,\n}\n\nclass Api implements IApi {\n  baseUrl = 'https://api.openweathermap.org/data/2.5/';\n  key = process.env.REACT_APP_OPEN_WEATHER_KEY || '7155342732aa29bc9d0c9f5cd5e4554b';\n\n  _tmp = axios.create({\n    baseURL: this.baseUrl,\n    responseType: 'json',\n  })\n\n  get = (city: string): Promise<any> => {\n    return this._tmp.get(`weather?q=${city}&units=metric&lang=ru&appid=${this.key}`)\n  }\n\n  getAll = (coord: { lat: number, lon: number }): Promise<any> => {\n    return this._tmp.get(`onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=minutely,current&units=metric&appid=${this.key}`)\n  }\n}\n\nexport const api: IApi = new Api();","import { IWeatherComparatorRequestArgs, IWeatherComparatorRequest } from '../types/actions'\n\nexport const WEATHER_COMPARATOR_REQUEST: string = 'WEATHER_COMPARATOR_REQUEST'\nexport const WEATHER_COMPARATOR_SUCCESS: string = 'WEATHER_COMPARATOR_SUCCESS'\nexport const WEATHER_COMPARATOR_FAILURE: string = 'WEATHER_COMPARATOR_FAILURE'\n\nexport const createWCRequest = (cities: IWeatherComparatorRequestArgs): IWeatherComparatorRequest => ({\n  type: WEATHER_COMPARATOR_REQUEST,\n  payload: cities,\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Loading_wrap__3qSsT\",\"fullWrap\":\"Loading_fullWrap__1BW-l\",\"loader\":\"Loading_loader__3pmY_\",\"load3\":\"Loading_load3__3zowq\"};","import React from 'react'\nimport s from './index.module.scss'\n\nexport const LoadingConst: React.ReactElement = <div className={s.fullWrap + ' animEl'}>\n  <div className={s.loader} id=\"loading\">loading</div>\n</div>\n\nexport const LoadingFullScreen: React.FC = () => {\n  return (<div className={s.fullWrap + ' animEl'}>\n    <div className={s.loader} id=\"loading\">loading</div>\n  </div>)\n}\n\nexport const LoadingThin: React.FC = () => {\n  return (<div className={s.wrap + ' animEl'}>\n    <div className={s.loader} id=\"loading\">loading</div>\n  </div>)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ErrorBoundary_wrap__Q_HiM\"};","import * as React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Header: React.FC = () => {\n\n  return (\n    <header>\n      <nav>\n        <div className=\"nav-wrapper blue lighten-3\">\n          <Link to={process.env.PUBLIC_URL + \"/\"} className=\"brand-logo p-1\">\n            <i className=\"large material-icons\">ac_unit</i>WC</Link>\n          <a role=\"button\" href=\"/\" data-target=\"mobile\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li><Link to={process.env.PUBLIC_URL + \"/\"}>Home</Link></li>\n            <li><Link to={process.env.PUBLIC_URL + \"/weather\"}>Weather</Link></li>\n            <li><Link to={process.env.PUBLIC_URL + \"/wc\"}>Weather Comparator</Link></li>\n          </ul>\n        </div>\n      </nav>\n      <ul className=\"sidenav\" id=\"mobile\">\n        <li><Link to={process.env.PUBLIC_URL + \"/\"}>Home</Link></li>\n        <li><Link to={process.env.PUBLIC_URL + \"/weather\"}>Weather</Link></li>\n        <li><Link to={process.env.PUBLIC_URL + \"/wc\"}>Weather Comparator</Link></li>\n      </ul>\n    </header>\n  )\n}","import React from 'react';\nimport loadable from '@loadable/component'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom'\nimport { Header } from './components/Header';\nimport { LoadingConst } from './components/Loading';\n\nimport './App.scss';\n\nconst Home = loadable(() => import('./pages/HomePage'), {\n  fallback: LoadingConst,\n})\n\nconst Weather = loadable(() => import('./containers/WeatherContainer'), {\n  fallback: LoadingConst,\n})\n\nconst NotFound = loadable(() => import('./pages/NotFound'), {\n  fallback: LoadingConst,\n})\n\nconst WeatherComparator = loadable(() => import('./containers/WeatherComparatorContainer'), {\n  fallback: LoadingConst,\n})\n\nexport const App: React.FC = () => {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path={process.env.PUBLIC_URL + \"/\"} exact>\n          <Home />\n        </Route>\n        <Route path={process.env.PUBLIC_URL + \"/weather\"}>\n          <Weather />\n        </Route>\n        <Route path={process.env.PUBLIC_URL + \"/wc\"}>\n          <WeatherComparator />\n        </Route>\n        <Route path={process.env.PUBLIC_URL + \"*\"}>\n          <NotFound />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as A from '../actions/weather'\nimport { IWeatherState } from '../types/state'\n\nexport const initState: IWeatherState = {\n  data: [],\n  timestamp: new Date(),\n  isFetching: false,\n  message: '',\n  code: 0,\n  dailyForecastData: [],\n  hourlyForecastData: [],\n}\n\nexport function weatherReducer(\n  state: IWeatherState = initState,\n  action: any\n): IWeatherState {\n\n  switch (action.type) {\n    case A.WEATHER_REQUEST:\n      return {\n        ...state,\n        isFetching: true,\n        message: '',\n        code: 0,\n      }\n\n    case A.WEATHER_CURRENT_SUCCESS:\n      return {\n        ...state,\n        data: [action.payload.data]\n      }\n\n\n    case A.WEATHER_ALL_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        dailyForecastData: action.payload.data.daily,\n        hourlyForecastData: action.payload.data.hourly,\n      }\n\n    case A.WEATHER_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        code: action.payload.response.status,\n        message: action.payload.message,\n      }\n\n    default:\n      return state;\n  }\n}","import * as A from '../actions/wc'\nimport { IWCState } from '../types/state'\n\nexport const initState: IWCState = {\n  data: [],\n  timestamp: new Date(),\n  isFetching: false,\n  message: '',\n  code: 0,\n}\n\nexport function weatherComparatorReducer(\n  state: IWCState = initState,\n  action: any\n): IWCState {\n\n  switch (action.type) {\n    case A.WEATHER_COMPARATOR_REQUEST:\n      return {\n        ...state,\n        isFetching: true,\n        message: '',\n        code: 0,\n      }\n\n    case A.WEATHER_COMPARATOR_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        data: action.payload.data\n      }\n\n    case A.WEATHER_COMPARATOR_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        code: action.payload.response.status,\n        message: action.payload.message,\n      }\n\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux'\nimport { weatherReducer } from './weather'\nimport { weatherComparatorReducer } from './wc'\n\n\nexport const rootReducer = combineReducers({\n  weather: weatherReducer,\n  wc: weatherComparatorReducer,\n})","import {\n  put,\n  takeEvery,\n  apply\n} from 'redux-saga/effects'\nimport * as A from '../actions/weather'\nimport { IWeatherRequest } from '../types/actions'\nimport { api } from '../helpers/api'\nimport { IWeatherData, IAllWeatherData } from '../types/apiResponse'\n\nexport function* handlerWeatherRequest(action: IWeatherRequest) {\n\n  try {\n    const transitResponse: IWeatherResponse = yield apply(api, api.get, [action.payload.city])\n\n    const { data: { coord: { lat, lon } } } = transitResponse\n\n    yield put({\n      type: A.WEATHER_CURRENT_SUCCESS,\n      payload: {\n        data: transitResponse.data\n      }\n    })\n\n    const response: IAllWeatherResponse = yield apply(api, api.getAll, [{ lat, lon }])\n\n    yield put({\n      type: A.WEATHER_ALL_SUCCESS,\n      payload: {\n        data: response.data\n      }\n    })\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: A.WEATHER_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport function* watchWeatherRequest() {\n\n  yield takeEvery(A.WEATHER_REQUEST, handlerWeatherRequest)\n}\n\nexport interface IWeatherResponse {\n  status: number;\n  data: IWeatherData;\n}\n\nexport interface IAllWeatherResponse {\n  status: number;\n  data: IAllWeatherData;\n}\n","import {\n  put,\n  takeEvery,\n  apply,\n} from 'redux-saga/effects'\nimport * as A from '../actions/wc'\nimport { IWeatherComparatorRequest } from '../types/actions'\nimport { api } from '../helpers/api'\nimport { IWeatherData } from '../types/apiResponse';\n\nexport function* handlerWCRequest(action: IWeatherComparatorRequest) {\n\n  try {\n    const cities = action.payload;\n\n    let citiesResponse: IWeatherData[] = [];\n\n    for (let i = 0; i < cities.length; i++) {\n      const response: IWeatherResponse = yield apply(api, api.get, [cities[i]])\n      citiesResponse.push(response.data)\n    }\n\n    yield put({\n      type: A.WEATHER_COMPARATOR_SUCCESS,\n      payload: {\n        data: citiesResponse\n      }\n    })\n\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: A.WEATHER_COMPARATOR_FAILURE,\n      payload: error,\n    })\n  }\n}\n\nexport function* watchWCRequest() {\n\n  yield takeEvery(A.WEATHER_COMPARATOR_REQUEST, handlerWCRequest)\n}\n\ninterface IWeatherResponse {\n  status: number;\n  data: IWeatherData;\n}\n","import { all } from 'redux-saga/effects'\nimport { watchWeatherRequest } from './weather'\nimport { watchWCRequest } from './wc'\n\nexport function* rootSaga() {\n  yield all([\n    watchWeatherRequest(),\n    watchWCRequest(),\n  ])\n}","import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { rootReducer } from '../reducers'\nimport { rootSaga } from '../sagas'\nimport logger from 'redux-logger'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(\n    sagaMiddleware,\n    logger,\n  )\n)\n\nsagaMiddleware.run(rootSaga)\n","import React from 'react'\nimport s from './index.module.scss'\n\ninterface IState {\n  hasError: boolean;\n  msg: string;\n  err: number;\n}\n\nexport class ErrorBoundary extends React.Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      hasError: false,\n      msg: '',\n      err: 0,\n    }\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return {\n      hasError: true,\n      msg: error.message,\n      err: error.name,\n    }\n  }\n\n  render() {\n    const err = this.state.err;\n    const msg = this.state.msg;\n    const hasError = this.state.err;\n\n    if (hasError) {\n      return (\n        <>\n          <h1>Что-то пошлло не так, пожалуйста обновите страницу!</h1>\n          <div className={s.wrap + ' container'}>\n            {err && err}\n            {msg && <h3>{msg}</h3>}\n          </div>\n        </>\n      )\n\n    } else {\n      return this.props.children\n    }\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\nimport { Provider } from 'react-redux'\nimport { ErrorBoundary } from './components/ErrorBoundary';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}